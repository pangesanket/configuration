###############################################################
##### CREATE JENKINS MASTER INSTANCE
  add port 8080 to the security groups 
  allow all the traffic
  
####### DO THE FOLLOWING STEPS IN MOBAXTERM ####
  
sudo -i 

# Install Java :::

sudo apt update
sudo apt install openjdk-17-jre
java -version


# Install Jenkins :::


curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins

jenkins --version 


systemctl status jenkins
systemctl start jenkins
systemctl restart jenkins
systemctl stop jenkins
systemctl enable jenkins

	<public_ip_Address>:8080 

### Install git 
  apt install git -y
  git --version
  (create access token in developer settings for future references)

### Install maven
  apt install maven 
  mvn --version
  (get the version name and path of the file for jenkins tool configuration )

##### User add
#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
#ssh-keygen -t rsa -b 2048 -m PEM								#ubuntu 20.04

ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				


ls ~/.ssh 

#You should see following two files:

#id_ecdsa - private key
#id_ecdsa.pub - public


#cat id_rsa.pub > authorized_keys

cat id_ecdsa.pub > authorized_keys

chmod 600 /home/devopsadmin/.ssh/*

#########################################################################################################################################
###### CREATE TOMCAT INSTANCE
  add port 8080 to the security groups 
  all the traffic 
 
sudo -i
sudo apt update -y
sudo apt install openjdk-11-jre -y 
java -version

#edit /etc/profile & add JAVA_HOME

#/usr/lib/jvm/java-17-openjdk-amd64/

vi /etc/profile

export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

source /etc/profile    (use command for immediate effect) 

Install Tomcat ::  https://tomcat.apache.org/download-80.cgi

#https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.93/bin/apache-tomcat-8.5.93.tar.gz   (by right clicking on the tar file from the tomcat website)

cd /opt

wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.93/bin/apache-tomcat-8.5.93.tar.gz

tar -xvzf /opt/apache-tomcat-8.5.93.tar.gz  (to extract file from zip)

mv apache-tomcat-8.5.93 tomcat  (rename the extracted file, NOT zip file)

#Start Tomcat Server:
#Goto:

cd /opt/tomcat/bin
./startup.sh

###########################################################################################################################

#### Jenkins Configuration
  install the required plugins (maven,pipeline, docker, sonar-scanner, kubernetes, )
  

---> tools configuration:
  jdk :- give name 
        add installer and select the version
 maven :- add name
          add path 
      or else  select version

----> Credential configuration:
                            Add git credentials through access token 
                            

##############################################################################################################################

SAMPLE PIPELINE
pipeline {

    agent { label 'java-slave1' }
	
    tools {
        maven "maven-3.6.3"
    }	
	
    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Hello World'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'  ##(if repo is public) ##(use script for private repo)
            }
        }
        stage('Build') {
            steps {
                echo 'Perform Maven Build'
				sh 'mvn -Dmaven.test.failure.ignore=true clean package'
            }
        }
        stage('Deploy to QA Server') {
            steps {
				script {
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'QA-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}
            }
        }
    }
}		

##############################################################################################################
pipeline {
    agent any
    
    tools{
        maven 'maven3'
    }

    stages {
        stage('SCM_Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git_cred', url: 'https://github.com/pangesanket/dummy-question-pattern.git'
            }
        }
        stage('App_Build') {
            steps {
                echo 'Perform Maven Build'
				sh 'mvn -Dmaven.test.failure.ignore=true install'
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Hello World'
            }
        }
    }
}
###########################################33333333


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 (github token)

dckr_pat_ArwgH83ux0zWa3NusROlVgzctus   (docker access token)


/var/lib/jenkins/workspace/pipeline/target/dummy-question-0.0.1-SNAPSHOT.jar

###################################################################################
NodeJS 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pipeline {
    agent any
    
    tools {
        nodejs 'NodeJS-22'
    }

    stages {
        stage('SCM checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/pangesanket/docker-react-app-test.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install -g serve'
            }
        }
        stage("OWASP Dependency Check"){
            steps{
                dependencyCheck additionalArguments: '--scan ./ --format HTML ', odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
    }
}
        stage("Docker Build & Push"){
            steps{
                withDockerRegistry(credentialsId: '4d18ebff-ca98-46ad-b76c-8330a16ac3c3', url: 'https://hub.docker.com/repositories/pangesanket55/') {
                    sh "docker build -t demonodejs  . "
                    sh "docker tag demonodejs pangesanket55/NodeJS:latest "
                    sh "docker push pangesanket55/NodeJS:latest "
                }
            }
        }
        stage('docker deploy'){
            steps {
                
            }
        }






/var/lib/jenkins/workspace/devops-learning/target/spring-boot-jenkins-pipeline.jar
